Leksika se bavi opisivanjem osnovnih gradivnih elemenata jezika - za programske jezike, to su simboli
String simbola se zove leksema - skup leksema i pravila njihovog formiranja predstavljaju leksiku jezika
U miniC jeziku postoji nekoliko vrsta simbola - identifikatori, označeni i neoznačeni celobrojni literali

scanner.l -> flex -> lex.yy.c -> gcc -> miniC skener
Globalne promenljive: za vrednost simbola yylval (unija), za string prepoznatog simbola yytext (char*)
U skeneru nam je bitan redosled pravila, tako da pravila za prepoznavanje ključnih reči treba staviti ispred pravila za identifikator

Sintaksa opisuje skup pravila za kombinovanje simbola u ispravne jezičke konstrukcije, formalno se opisuje gramatikom

syntax.y -> bison -> y.tab.c -> gcc -> miniC parser
U datoteci y.tab.c se nalazi funkcija za parsiranje yyparse()

Semantička analiza se, najčešće, implementira u parseru, tako što se pravilima dodaju semantičke provere
Tabela simbola je struktura podataka koja čuva identifikatore iz kompajliranog programa i sve informacije o tim identifikatorima
Ona je neophodna za semantičku analizu jer sadrži sve informacije na osnovu kojih se mogu sprovesti semantičke provere
Funkcija main() vrši inicijalizaciju tabele simbola (init_symtab()) pre početka parsiranja i brisanje tabele simbola (clear_symtab()) nakon parsiranja

miniC jezik mora da ima main() funkciju
U jednoj miniC deklaraciji moguća je deklarisati samo jednu promenljivu, mora da se završi sa ";"
Unutar tela funkcije, prvo se navode deklaracije lokalnih promenljivih, pa tek onda iskazi (obrnuto je neispravno)
Poziv miniC funkcije (function_call) se sastoji od imena funkcije i malih zagrada u kojima se može, a ne mora, navesti jedan agrument (num_exp)

Iskazi koji mogu da se pojave u telu funkcije su:
- iskaz dodele (assignment_stmt)
- if iskaz (if_stmt)
- return iskaz (return_stmt)
- blok iskaza (compound_stmt)
U iskazima se koriste numerički izrazi (num_exp)

Numerički izraz (num_exp) se gradi od literala, promenljivih i poziva funkcija
Od aritmetičkih operacija, podržano je samo sabiranje i oduzimanje
Izraz dodela (assignment_stmt) sa leve strane znaka jednako se može naći promenljiva, a sa desne numerički izraz
return iskaz očekuje da se iza ključne reči return navede numerički izraz, čija će vrednost biti povratna vrednost funkcije u kojoj se nalazi
Blok iskaza može biti i prazan, ali se u bloku ne može deklarisati promenljiva

Standardni identifikatori su rezervisane reči (int, unsigned, if, else, return) i main
Globalni identifikatori su imena funkcija
Lokalni identifikatori su imena lokalnih promenljivih i parametara
Identifikatori mogu biti korišćeni samo iza njihove definicije

Faze kompajliranja za micko: 
- leksička analiza 		(tekst se čita i deli na simbole programskog jezika)
- sintaksna analiza 	(pravi se stablo parsiranja)
- semantička analiza 	(proverava konzistentnost programa)
- generisanje koda 		(prevodi miniC kod na hipotetski asemblerski jezik)
(optimizacija koda nije implementirana)
Sve faze kompajliranja koriste tabelu simbola

Parser za miniC je proširen promenljivama koje se koriste u toku provere semantike:
- error_count - broj grešaka
- warning_count - broj upozorenja
- var_num - broj lokalnih promenljivih
- fun_idx - indeks u TS na kom se nalazi indeks trenutno parsirane funkcije
- fcall_idx - indeks u TS na kom se nalazi ime funkcije čiji poziv se trenutno parsira 

Tipovi pojmova - iza ključne reči %type se navodi tip iz unije (<i> ili <s>), a zatim imena svih pojmova koji će biti tog tipa
- %type <i> type num_exp exp literal parameter
- %type <i> function_call argument rel_exp

