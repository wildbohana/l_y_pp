Skeniranje deli ulaz na atomske delove - tokene
Parsiranje analizira kako su ti tokeni međusobno povezani

Skeneri rade tako što traže šablone karaktera u ulazu
Ovi šabloni se mogu opisati regularnim izrazima (flex program se u osnovi sastoji od liste RE)
Uz svaki RE stoji uputstvo o tome šta skener treba da radi kada ulazni string odgovara tom RE (akcije)
Flex sve RE pretvara u deterministički konačni automat (i tako proverava kom RE odgovara ulazni string)
Podrazumevana akcija za tekst koji ne odgovara ni jednom RE je kopiranje teksta na standardni izlaz
String prepoznate reči se nalazi u flex-ovoj globalnoj promenljivoj yytext

Zadatak parsera je da shvati povezanost između ulaznih tokena
Uobičajen način da se takva veza prikaže je stablo parsiranja (bison implicitno pravi stablo parsiranja dok parsira ulazni tekst)
bottom-up parseri grade stablo parsiranja od listova ka korenu stabla
LR parseri imaju četiri vrste akcija: shift, reduce, accept, error
Token je numerička oznaka grupe (vrste) simbola, čini ga par vrsta, vrednost
Skener parseru vraća token za prepoznat simbol (a ne string prepoznatog simbola)
Skener parseru može da vrati i neku vrednost koja preciznije opisuje svojstva tokena - preko globalne promenljive yylval
Sintaksa jezika opisuje pravila po kojima se kombinuju simboli (terminali, tokeni) jezika
Pravila: pojam ::= pojmovi i/ili simboli
Pravila mogu biti levo ili desno rekurzivna (bison mnogo bolje rukuje levom rekurzijom)
Bison rukuje samo sintaksnom, a sve ostale (semantička) validacije su ostavljene korisniku
Pravilima u bison specifikaciji možemo da dodamo akcije - tako dobijamo semantiku (značenje) jezika

Tokeni koje šalje skener, a koje prima parser, se moraju definisati pomoću ključne reči %token
Uz svaki token se može definisati tip vrednosti koja se prosleđuje sa njim, između operatora < i >

Uobičajena vrsta jezika koju koriste parseri je CFG (standardno se pišu u BNF notaciji)
Gramatika je skup pravila za pisanje programa na nekom jeziku, opisuje sintaksu jezika, ali ne i semantiku
Gramatika se sastoji od simbola (terminali - skener) i pojmova (neterminali - parser)
Svaka linija gramatike predstavlja pravilo koja opisuje kako se može napraviti jedna grana stabla parsiranja
Ime sa leve strane pravila je pojam, a sa desne strane se nalaze simboli (svi tokeni se smatraju simbolima)

Konflikti mogu biti posledica dvosmislenosti gramatike ili ograničenja metode parsiranja
shift/reduce konflikti - nastao zbog toga što bison-u nismo ništa rekli o prioritetu i asocijativnosti operatora
reduce/reduce konflikti - bison može da na dva načina redukuje isti simbol, i ne zna šta da radi

main() funkcija jedino poziva parser yyparse()
Ukoliko dođe do sintaksne greške, pozvaće se funkcija yyerror() koja ispisuje poruku o grešci
Greške mogu biti:
- leksičke 		(pogrešno napisano ime, ključna reč ili operator)
- sintaksne 	(logički izraz sa nepotpunim parom zagrada)
- semantičke 	(operator primenjen na nekompatibilni operand)
- logičke 		(beskonačan rekurzivni poziv)
Ako kompajler ne može da se oporavi od greške, zaustaviće parsiranje

